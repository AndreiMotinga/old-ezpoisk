= title("#{@question.title} - ezpoisk")
= desc(strip_tags(@question.text_to_show).truncate(200))
- content_for :secondary_navbar do
  = render "questions/navbar"
- content_for :head do
  %meta{property: "fb:app_id", content: ENV["FACEBOOK_APP_ID"] }/
  %meta{property: "og:type", content: "article"}/
  %meta{property: "og:url", content: question_url(@question) }/
  %meta{property: "og:title", content: @question.title}/
  %meta{property: "og:image", content: image_url("missing")}/
  %meta{property: "og:description", content: strip_tags(@question.text_to_show).truncate(200)}/

- content_for :side do
  %br/
  .text-center
    = link_to "ОТВЕТИТЬ", new_question_answer_path(@question), class: "btn btn-lg btn-warning btn-ez"
  %br/
  .col-xs-12.col-md-11.col-md-offset-1.white-block
    - if @question.side_questions.any?
      - @question.side_questions.each do |q|
        .panel.panel-default.home-panel
          .panel-body
            %h2.q-title= link_to q.title, q, target: "_blank"
            %span #{q.impressions_count} просмотров,
            %span #{q.answers_count} ответов

.row
  / question
  .col-xs-12.white-block
    %h1.question-title= @question.title
    %p.text= sanitize @question.text if @question.text.present?

    / answer button/links
    = link_to "ответить", new_question_answer_path(@question), class: "text text-muted qa-links"
    = link_to "коментировать", "#comments", class: "text text-muted qa-links", "aria-expanded": "false", "data-toggle": "collapse"
    = subscription_links
    - if current_user == @question.user
      = link_to 'редактировать', edit_question_path(@question), class: "text text-muted qa-links"

    %br/
    %br/
    .q-social
      = render "shared/social", url: question_url(@question), count: @question.impressions_count

    / collapsed comments
    #comments.collapse
      .fb-comments{"data-href" => question_url(@question), "data-numposts" => "5"}

    %hr#lenta/
    %p= tag_links(@question)

%br/
/ ANSWERS
.row
  = render "questions/no_answers_message" if @question.answers.empty?
  = render @question.answers.includes(:user).by_score
